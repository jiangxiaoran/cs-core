
2.3 关键代码片段（伪代码）
// 1. 入口Handler（由XXL-JOB定时触发）
@XxlJob("queueDispatcherHandler")
public void dispatcher() {
    String batchNo = ...; // 解析参数
    // 生成本批次队列
    jobQueueService.generateQueue(batchNo);
    // 进入调度循环
    while (true) {
        List<JobQueue> readyJobs = jobQueueService.findReadyJobs(batchNo);
        if (readyJobs.isEmpty()) break;
        for (JobQueue job : readyJobs) {
            jobQueueService.runJob(job);
        }
    }
}

// 2. 队列出队与依赖检查
public List<JobQueue> findReadyJobs(String batchNo) {
    // 查询所有PENDING且依赖全部SUCCESS的作业
    // SQL: select * from job_queue where batch_no=? and status='PENDING' and all dependencies SUCCESS
}

// 3. 作业执行与状态流转
public void runJob(JobQueue job) {
    try {
        // 调用存储过程
        jdbcTemplate.execute("{call " + job.getProcName() + "(?,...)}", ...);
        job.setStatus("SUCCESS");
    } catch (Exception e) {
        if (job.getTryCount() < job.getRetryCount()) {
            job.setStatus("PENDING");
            job.setTryCount(job.getTryCount() + 1);
        } else {
            job.setStatus("FAILED");
            mailService.sendFailMail(job, e.getMessage());
        }
    }
    jobQueueRepository.save(job);
}
