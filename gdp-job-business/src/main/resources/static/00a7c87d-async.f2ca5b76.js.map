{"version":3,"sources":["src/services/dashboard/api.ts","src/components/SimpleChart.tsx","src/pages/dashboard/index.tsx"],"sourcesContent":["import request from '@/utils/request';\r\n\r\n/** 获取仪表板信息 */\r\nexport async function getDashboardInfo(params?: {\r\n  startDate?: string;\r\n  endDate?: string;\r\n  jobCode?: string;\r\n}) {\r\n  return request<API.DashboardResponse>('/v1/dashboard/overview', {\r\n    method: 'GET',\r\n    params,\r\n  });\r\n}\r\n\r\n/** 获取系统状态详情 */\r\nexport async function getSystemStatus() {\r\n  return request<API.SystemStatusResponse>('/v1/dashboard/system-status', {\r\n    method: 'GET',\r\n  });\r\n}\r\n\r\n/** 获取执行趋势图表数据 */\r\nexport async function getExecutionTrend(params: API.ChartParams) {\r\n  return request<API.ChartResponse>('/v1/dashboard/chart/execution-trend', {\r\n    method: 'GET',\r\n    params,\r\n  });\r\n}\r\n\r\n/** 获取任务分组统计 */\r\nexport async function getJobGroupStats() {\r\n  return request<API.JobGroupStatsResponse>('/v1/dashboard/chart/job-group-stats', {\r\n    method: 'GET',\r\n  });\r\n}\r\n\r\n/** 获取任务类型分布 */\r\nexport async function getJobTypeDistribution() {\r\n  return request<API.JobTypeDistributionResponse>('/v1/dashboard/chart/job-type-distribution', {\r\n    method: 'GET',\r\n  });\r\n}\r\n\r\n/** 获取执行器性能统计 */\r\nexport async function getExecutorPerformance(params?: {\r\n  startDate?: string;\r\n  endDate?: string;\r\n}) {\r\n  return request<API.ExecutorPerformanceResponse>('/v1/dashboard/chart/executor-performance', {\r\n    method: 'GET',\r\n    params,\r\n  });\r\n}\r\n\r\n/** 获取最近执行记录 */\r\nexport async function getRecentExecutions(limit: number = 10) {\r\n  return request<API.RecentExecutionsResponse>('/v1/dashboard/recent-executions', {\r\n    method: 'GET',\r\n    params: { limit },\r\n  });\r\n}\r\n\r\n/** 获取当前运行任务 */\r\nexport async function getRunningJobs() {\r\n  return request<API.RunningJobsResponse>('/v1/dashboard/running-jobs', {\r\n    method: 'GET',\r\n  });\r\n}\r\n\r\n/** 获取系统告警信息 */\r\nexport async function getAlerts(params?: {\r\n  level?: string;\r\n  limit?: number;\r\n}) {\r\n  return request<API.AlertsResponse>('/v1/dashboard/alerts', {\r\n    method: 'GET',\r\n    params,\r\n  });\r\n}\r\n\r\n/** 获取日报表 */\r\nexport async function getDailyReport(date?: string) {\r\n  return request<API.DailyReportResponse>('/v1/dashboard/report/daily', {\r\n    method: 'GET',\r\n    params: { date },\r\n  });\r\n}\r\n\r\n/** 获取月报表 */\r\nexport async function getMonthlyReport(params?: {\r\n  year?: number;\r\n  month?: number;\r\n}) {\r\n  return request<API.MonthlyReportResponse>('/v1/dashboard/report/monthly', {\r\n    method: 'GET',\r\n    params,\r\n  });\r\n} ","import React, { useEffect, useRef, useState } from 'react';\r\nimport * as echarts from 'echarts';\r\n\r\ninterface SimpleChartProps {\r\n  data: any;\r\n  type: 'line' | 'pie';\r\n  height?: number;\r\n  width?: string;\r\n}\r\n\r\nconst SimpleChart: React.FC<SimpleChartProps> = ({ data, type, height = 400, width = '100%' }) => {\r\n  const chartRef = useRef<HTMLDivElement>(null);\r\n  const chartInstance = useRef<echarts.ECharts | null>(null);\r\n  const [isReady, setIsReady] = useState(false);\r\n\r\n  // 初始化图表\r\n  useEffect(() => {\r\n    if (chartRef.current && !chartInstance.current) {\r\n      try {\r\n        chartInstance.current = echarts.init(chartRef.current);\r\n        setIsReady(true);\r\n        console.log('✅ 图表初始化成功');\r\n      } catch (error) {\r\n        console.error('❌ 图表初始化失败:', error);\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      if (chartInstance.current) {\r\n        chartInstance.current.dispose();\r\n        chartInstance.current = null;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // 更新图表数据\r\n  useEffect(() => {\r\n    if (!isReady || !chartInstance.current || !data) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log('🔥 开始更新图表数据:', data);\r\n      \r\n      let option: any;\r\n      \r\n      if (type === 'line') {\r\n        option = {\r\n          title: { text: '执行趋势图', left: 'center' },\r\n          tooltip: { trigger: 'axis' },\r\n          legend: { data: ['成功', '失败', '总计'], top: 30 },\r\n          grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true },\r\n          xAxis: { type: 'category', data: data.dates || [] },\r\n          yAxis: { type: 'value' },\r\n          series: [\r\n            {\r\n              name: '成功',\r\n              type: 'line',\r\n              data: data.successCounts || [],\r\n              color: '#00A65A',\r\n            },\r\n            {\r\n              name: '失败',\r\n              type: 'line',\r\n              data: data.failedCounts || [],\r\n              color: '#c23632',\r\n            },\r\n            {\r\n              name: '总计',\r\n              type: 'line',\r\n              data: data.totalCounts || [],\r\n              color: '#F39C12',\r\n            },\r\n          ],\r\n        };\r\n      } else if (type === 'pie') {\r\n        option = {\r\n          title: { text: '执行状态分布', left: 'center' },\r\n          tooltip: { trigger: 'item', formatter: '{b} : {c} ({d}%)' },\r\n          legend: { orient: 'vertical', left: 'left', top: 'middle' },\r\n          series: [\r\n            {\r\n              name: '执行状态',\r\n              type: 'pie',\r\n              radius: '50%',\r\n              data: [\r\n                { value: data.successExecutions || 0, name: '成功' },\r\n                { value: data.failedExecutions || 0, name: '失败' },\r\n                { value: data.runningJobs || 0, name: '运行中' },\r\n              ],\r\n              emphasis: {\r\n                itemStyle: {\r\n                  shadowBlur: 10,\r\n                  shadowOffsetX: 0,\r\n                  shadowColor: 'rgba(0, 0, 0, 0.5)',\r\n                },\r\n              },\r\n            },\r\n          ],\r\n          color: ['#00A65A', '#c23632', '#F39C12'],\r\n        };\r\n      }\r\n\r\n      if (option) {\r\n        // 清空现有配置\r\n        chartInstance.current.clear();\r\n        \r\n        // 设置新配置\r\n        chartInstance.current.setOption(option, true);\r\n        \r\n        // 强制重绘\r\n        chartInstance.current.resize();\r\n        \r\n        console.log('✅ 图表更新成功');\r\n        \r\n        // 验证配置\r\n        setTimeout(() => {\r\n          const currentOption = chartInstance.current?.getOption();\r\n          console.log('🔥 图表配置验证:', currentOption);\r\n          \r\n          if (currentOption && currentOption.series && Array.isArray(currentOption.series)) {\r\n            const hasData = currentOption.series.some(series => \r\n              series.data && Array.isArray(series.data) && series.data.length > 0\r\n            );\r\n            console.log('🔥 图表有数据:', hasData);\r\n          }\r\n        }, 100);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ 图表更新失败:', error);\r\n    }\r\n  }, [data, type, isReady]);\r\n\r\n  // 窗口大小变化时重新调整\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      if (chartInstance.current) {\r\n        chartInstance.current.resize();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={chartRef}\r\n      style={{\r\n        width,\r\n        height,\r\n        border: '1px solid #f0f0f0',\r\n        borderRadius: '4px',\r\n        backgroundColor: '#fff',\r\n        visibility: 'visible',\r\n        display: 'block',\r\n        opacity: 1,\r\n        position: 'relative',\r\n        zIndex: 1,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SimpleChart;\r\n","import { PageContainer } from '@ant-design/pro-components';\nimport { Card, Col, Row, Statistic, DatePicker, Space, message } from 'antd';\nimport { useRequest } from '@umijs/max';\nimport React, { useEffect, useState } from 'react';\nimport { getDashboardInfo, getExecutionTrend } from '@/services/dashboard/api';\nimport dayjs from 'dayjs';\nimport SimpleChart from '@/components/SimpleChart';\n\nconst { RangePicker } = DatePicker;\n\n/**\n * Dashboard 组件 - 运行报表页面\n * \n * 功能说明：\n * 1. 显示系统运行状态统计信息\n * 2. 提供日期范围选择功能\n * 3. 展示执行趋势图表和状态分布\n * 4. 支持实时数据刷新\n */\nconst Dashboard: React.FC = () => {\n  // ==================== 状态管理 ====================\n  \n  /**\n   * 日期范围状态\n   * 默认显示最近7天的数据\n   */\n  const [dateRange, setDateRange] = useState<[dayjs.Dayjs, dayjs.Dayjs]>([\n    dayjs().subtract(7, 'day'),\n    dayjs(),\n  ]);\n\n  // ==================== API 请求配置 ====================\n  \n  /**\n   * 获取仪表板概览数据\n   * 包含任务数量、执行次数、系统状态等统计信息\n   */\n  const { \n    data: dashboardData, \n    loading: dashboardLoading, \n    error: dashboardError, \n    run: runDashboard \n  } = useRequest(getDashboardInfo, {\n    pollingInterval: 30000, // 30秒自动刷新一次\n    onError: (error) => {\n      console.error('获取仪表板数据失败:', error);\n      message.error('获取仪表板数据失败: ' + (error instanceof Error ? error.message : String(error)));\n    }\n  });\n\n  /**\n   * 获取图表趋势数据\n   * 根据选择的日期范围获取执行趋势数据\n   */\n  const { \n    data: chartDataFromRequest, \n    loading: chartLoading, \n    error: chartError, \n    run: runChart \n  } = useRequest(\n    () => getExecutionTrend({\n      startDate: dateRange[0].format('YYYY-MM-DD'),\n      endDate: dateRange[1].format('YYYY-MM-DD'),\n      groupBy: 'day',\n    }),\n    {\n      refreshDeps: [dateRange], // 日期变化时自动刷新\n      onError: (error) => {\n        console.error('获取图表数据失败:', error);\n        message.error('获取图表数据失败: ' + (error instanceof Error ? error.message : String(error)));\n      }\n    }\n  );\n\n  // ==================== 数据处理 ====================\n  \n  /**\n   * 提取API响应中的实际数据\n   * 兼容不同的API响应格式\n   */\n  const dashboardContent = (dashboardData as any)?.data || dashboardData;\n  const chartContent = (chartDataFromRequest as any)?.data || chartDataFromRequest;\n\n  // ==================== 事件处理函数 ====================\n  \n  /**\n   * 处理日期范围变化\n   * @param dates 选择的日期范围\n   */\n  const handleDateRangeChange = (dates: any) => {\n    if (dates && dates.length === 2) {\n      console.log('🔥 日期范围变化:', dates[0].format('YYYY-MM-DD'), '到', dates[1].format('YYYY-MM-DD'));\n      setDateRange([dates[0], dates[1]]);\n      \n      // 立即刷新图表数据\n      runChart();\n    }\n  };\n\n  // ==================== 生命周期管理 ====================\n  \n  /**\n   * 组件挂载后自动加载数据\n   */\n  useEffect(() => {\n    runDashboard();\n    runChart();\n  }, []);\n\n  // ==================== 渲染函数 ====================\n  \n  /**\n   * 渲染错误信息卡片\n   */\n  const renderErrorCard = () => {\n    if (!dashboardError && !chartError) return null;\n    \n    return (\n      <Card style={{ marginBottom: 16 }}>\n        <div style={{ color: 'red' }}>\n          {dashboardError && <div>仪表板数据获取失败: {dashboardError.message}</div>}\n          {chartError && <div>图表数据获取失败: {chartError.message}</div>}\n        </div>\n      </Card>\n    );\n  };\n\n  /**\n   * 渲染统计信息卡片\n   */\n  const renderStatisticsCards = () => (\n    <Row gutter={16} style={{ marginBottom: 24 }}>\n      <Col span={6}>\n        <Card>\n          <Statistic\n            title=\"任务数量\"\n            value={dashboardContent?.totalJobs || 0}\n            loading={dashboardLoading}\n            suffix=\"个\"\n          />\n        </Card>\n      </Col>\n      <Col span={6}>\n        <Card>\n          <Statistic\n            title=\"总执行次数\"\n            value={dashboardContent?.totalExecutions || 0}\n            loading={dashboardLoading}\n            suffix=\"次\"\n          />\n        </Card>\n      </Col>\n      <Col span={6}>\n        <Card>\n          <Statistic\n            title=\"成功次数\"\n            value={dashboardContent?.successExecutions || 0}\n            loading={dashboardLoading}\n            suffix=\"次\"\n            valueStyle={{ color: '#3f8600' }}\n          />\n        </Card>\n      </Col>\n      <Col span={6}>\n        <Card>\n          <Statistic\n            title=\"失败次数\"\n            value={dashboardContent?.failedExecutions || 0}\n            loading={dashboardLoading}\n            suffix=\"次\"\n            valueStyle={{ color: '#cf1322' }}\n          />\n        </Card>\n      </Col>\n    </Row>\n  );\n\n  /**\n   * 渲染数据状态提示\n   */\n  const renderDataStatusCard = () => {\n    if (dashboardLoading || dashboardContent) return null;\n    \n    return (\n      <Card style={{ marginBottom: 16 }}>\n        <div style={{ textAlign: 'center', color: '#666' }}>\n          <p>暂无数据，请检查：</p>\n          <ul style={{ textAlign: 'left', display: 'inline-block' }}>\n            <li>后端服务是否正常运行（localhost:8081）</li>\n            <li>数据库中是否有数据</li>\n            <li>API接口是否正常响应</li>\n          </ul>\n        </div>\n      </Card>\n    );\n  };\n\n  /**\n   * 渲染图表区域\n   */\n  const renderChartSection = () => (\n    <Card title=\"执行趋势报表\" loading={chartLoading}>\n      <Row gutter={16}>\n        <Col span={16}>\n          <SimpleChart\n            type=\"line\"\n            data={chartContent}\n            height={400}\n            width=\"100%\"\n          />\n        </Col>\n        <Col span={8}>\n          <SimpleChart\n            type=\"pie\"\n            data={dashboardContent}\n            height={400}\n            width=\"100%\"\n          />\n        </Col>\n      </Row>\n    </Card>\n  );\n\n  // ==================== 主渲染函数 ====================\n  \n  return (\n    <PageContainer\n      title=\"运行报表\"\n      extra={\n        <Space>\n          <RangePicker\n            value={dateRange}\n            onChange={handleDateRangeChange}\n            format=\"YYYY-MM-DD\"\n            placeholder={['开始时间', '结束时间']}\n          />\n        </Space>\n      }\n    >\n      {/* 错误信息显示 */}\n      {renderErrorCard()}\n      \n      {/* 统计信息卡片 */}\n      {renderStatisticsCards()}\n      \n      {/* 数据状态提示 */}\n      {renderDataStatusCard()}\n      \n      {/* 图表区域 */}\n      {renderChartSection()}\n    </PageContainer>\n  );\n};\n\nexport default Dashboard; "],"names":[],"mappings":"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"}